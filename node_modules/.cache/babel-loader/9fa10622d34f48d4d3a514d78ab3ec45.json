{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar tslib = require('tslib');\nvar util = require('@firebase/util');\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\nvar Component = /** @class */function () {\n  /**\r\n   *\r\n   * @param name The public service name, e.g. app, auth, firestore, database\r\n   * @param instanceFactory Service factory responsible for creating the public interface\r\n   * @param type whether the service provided by the component is public or private\r\n   */\n  function Component(name, instanceFactory, type) {\n    this.name = name;\n    this.instanceFactory = instanceFactory;\n    this.type = type;\n    this.multipleInstances = false;\n    /**\r\n     * Properties to be added to the service namespace\r\n     */\n    this.serviceProps = {};\n    this.instantiationMode = \"LAZY\" /* LAZY */;\n  }\n\n  Component.prototype.setInstantiationMode = function (mode) {\n    this.instantiationMode = mode;\n    return this;\n  };\n  Component.prototype.setMultipleInstances = function (multipleInstances) {\n    this.multipleInstances = multipleInstances;\n    return this;\n  };\n  Component.prototype.setServiceProps = function (props) {\n    this.serviceProps = props;\n    return this;\n  };\n  return Component;\n}();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\nvar Provider = /** @class */function () {\n  function Provider(name, container) {\n    this.name = name;\n    this.container = container;\n    this.component = null;\n    this.instances = new Map();\n    this.instancesDeferred = new Map();\n  }\n  /**\r\n   * @param identifier A provider can provide mulitple instances of a service\r\n   * if this.component.multipleInstances is true.\r\n   */\n  Provider.prototype.get = function (identifier) {\n    if (identifier === void 0) {\n      identifier = DEFAULT_ENTRY_NAME;\n    }\n    // if multipleInstances is not supported, use the default name\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      var deferred = new util.Deferred();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n      // If the service instance is available, resolve the promise with it immediately\n      try {\n        var instance = this.getOrInitializeService(normalizedIdentifier);\n        if (instance) {\n          deferred.resolve(instance);\n        }\n      } catch (e) {\n        // when the instance factory throws an exception during get(), it should not cause\n        // a fatal error. We just return the unresolved promise in this case.\n      }\n    }\n    return this.instancesDeferred.get(normalizedIdentifier).promise;\n  };\n  Provider.prototype.getImmediate = function (options) {\n    var _a = tslib.__assign({\n        identifier: DEFAULT_ENTRY_NAME,\n        optional: false\n      }, options),\n      identifier = _a.identifier,\n      optional = _a.optional;\n    // if multipleInstances is not supported, use the default name\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    try {\n      var instance = this.getOrInitializeService(normalizedIdentifier);\n      if (!instance) {\n        if (optional) {\n          return null;\n        }\n        throw Error(\"Service \" + this.name + \" is not available\");\n      }\n      return instance;\n    } catch (e) {\n      if (optional) {\n        return null;\n      } else {\n        throw e;\n      }\n    }\n  };\n  Provider.prototype.getComponent = function () {\n    return this.component;\n  };\n  Provider.prototype.setComponent = function (component) {\n    var e_1, _a;\n    if (component.name !== this.name) {\n      throw Error(\"Mismatching Component \" + component.name + \" for Provider \" + this.name + \".\");\n    }\n    if (this.component) {\n      throw Error(\"Component for \" + this.name + \" has already been provided\");\n    }\n    this.component = component;\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService(DEFAULT_ENTRY_NAME);\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n    try {\n      // Create service instances for the pending promises and resolve them\n      // NOTE: if this.multipleInstances is false, only the default instance will be created\n      // and all promises with resolve with it regardless of the identifier.\n      for (var _b = tslib.__values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var _d = tslib.__read(_c.value, 2),\n          instanceIdentifier = _d[0],\n          instanceDeferred = _d[1];\n        var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n        try {\n          // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n          var instance = this.getOrInitializeService(normalizedIdentifier);\n          instanceDeferred.resolve(instance);\n        } catch (e) {\n          // when the instance factory throws an exception, it should not cause\n          // a fatal error. We just leave the promise unresolved.\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  Provider.prototype.clearInstance = function (identifier) {\n    if (identifier === void 0) {\n      identifier = DEFAULT_ENTRY_NAME;\n    }\n    this.instancesDeferred.delete(identifier);\n    this.instances.delete(identifier);\n  };\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  Provider.prototype.delete = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var services;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            services = Array.from(this.instances.values());\n            return [4 /*yield*/, Promise.all(tslib.__spread(services.filter(function (service) {\n              return 'INTERNAL' in service;\n            }) // legacy services\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            .map(function (service) {\n              return service.INTERNAL.delete();\n            }), services.filter(function (service) {\n              return '_delete' in service;\n            }) // modularized services\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            .map(function (service) {\n              return service._delete();\n            })))];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  Provider.prototype.isComponentSet = function () {\n    return this.component != null;\n  };\n  Provider.prototype.getOrInitializeService = function (identifier) {\n    var instance = this.instances.get(identifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, normalizeIdentifierForFactory(identifier));\n      this.instances.set(identifier, instance);\n    }\n    return instance || null;\n  };\n  Provider.prototype.normalizeInstanceIdentifier = function (identifier) {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  };\n\n  return Provider;\n}();\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier) {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\nfunction isComponentEager(component) {\n  return component.instantiationMode === \"EAGER\" /* EAGER */;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\nvar ComponentContainer = /** @class */function () {\n  function ComponentContainer(name) {\n    this.name = name;\n    this.providers = new Map();\n  }\n  /**\r\n   *\r\n   * @param component Component being added\r\n   * @param overwrite When a component with the same name has already been registered,\r\n   * if overwrite is true: overwrite the existing component with the new component and create a new\r\n   * provider with the new component. It can be useful in tests where you want to use different mocks\r\n   * for different tests.\r\n   * if overwrite is false: throw an exception\r\n   */\n  ComponentContainer.prototype.addComponent = function (component) {\n    var provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\"Component \" + component.name + \" has already been registered with \" + this.name);\n    }\n    provider.setComponent(component);\n  };\n  ComponentContainer.prototype.addOrOverwriteComponent = function (component) {\n    var provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n    this.addComponent(component);\n  };\n  /**\r\n   * getProvider provides a type safe interface where it can only be called with a field name\r\n   * present in NameServiceMapping interface.\r\n   *\r\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n   * themselves.\r\n   */\n  ComponentContainer.prototype.getProvider = function (name) {\n    if (this.providers.has(name)) {\n      return this.providers.get(name);\n    }\n    // create a Provider for a service that hasn't registered with Firebase\n    var provider = new Provider(name, this);\n    this.providers.set(name, provider);\n    return provider;\n  };\n  ComponentContainer.prototype.getProviders = function () {\n    return Array.from(this.providers.values());\n  };\n  return ComponentContainer;\n}();\nexports.Component = Component;\nexports.ComponentContainer = ComponentContainer;\nexports.Provider = Provider;","map":{"version":3,"names":["Component","name","instanceFactory","type","multipleInstances","serviceProps","instantiationMode","prototype","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","DEFAULT_ENTRY_NAME","Provider","container","component","instances","Map","instancesDeferred","get","identifier","normalizedIdentifier","normalizeInstanceIdentifier","has","deferred","util","Deferred","set","instance","getOrInitializeService","resolve","e","promise","getImmediate","options","_a","tslib","__assign","optional","Error","getComponent","setComponent","isComponentEager","_b","__values","entries","_c","next","done","_d","__read","value","instanceIdentifier","instanceDeferred","clearInstance","delete","services","Array","from","values","Promise","all","__spread","filter","service","map","INTERNAL","_delete","sent","isComponentSet","normalizeIdentifierForFactory","undefined","ComponentContainer","providers","addComponent","provider","getProvider","addOrOverwriteComponent","getProviders"],"sources":["../src/component.ts","../src/constants.ts","../src/provider.ts","../src/component_container.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport { InstantiationMode, Name, NameServiceMapping } from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier: string = DEFAULT_ENTRY_NAME): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n      // If the service instance is available, resolve the promise with it immediately\n      try {\n        const instance = this.getOrInitializeService(normalizedIdentifier);\n        if (instance) {\n          deferred.resolve(instance);\n        }\n      } catch (e) {\n        // when the instance factory throws an exception during get(), it should not cause\n        // a fatal error. We just return the unresolved promise in this case.\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    const { identifier, optional } = {\n      identifier: DEFAULT_ENTRY_NAME,\n      optional: false,\n      ...options\n    };\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    try {\n      const instance = this.getOrInitializeService(normalizedIdentifier);\n\n      if (!instance) {\n        if (optional) {\n          return null;\n        }\n        throw Error(`Service ${this.name} is not available`);\n      }\n      return instance;\n    } catch (e) {\n      if (optional) {\n        return null;\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService(DEFAULT_ENTRY_NAME);\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier = this.normalizeInstanceIdentifier(\n        instanceIdentifier\n      );\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService(normalizedIdentifier)!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  private getOrInitializeService(\n    identifier: string\n  ): NameServiceMapping[T] | null {\n    let instance = this.instances.get(identifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(\n        this.container,\n        normalizeIdentifierForFactory(identifier)\n      ) as NameServiceMapping[T];\n      this.instances.set(identifier, instance);\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(identifier: string): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager(component: Component<Name>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}